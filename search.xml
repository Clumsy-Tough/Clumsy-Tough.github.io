<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>集成电路、微架构、微处理器、微程序、微指令、微操作、微程序设计技术</title>
    <url>/2023/02/23/%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E3%80%81%E5%BE%AE%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8%E3%80%81%E5%BE%AE%E7%A8%8B%E5%BA%8F%E3%80%81%E5%BE%AE%E6%8C%87%E4%BB%A4%E3%80%81%E5%BE%AE%E6%93%8D%E4%BD%9C%E3%80%81%E5%BE%AE%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><strong>集成电路</strong>，又称为微电路、微芯片、芯片，在电子学上是一种将电路集中制造在半导体晶圆表面上的小型化方式</p>
<p><strong>微架构</strong>，又称为微体系结构 &#x2F;微处理器体系结构， 是在计算机工程 中，将一种给定的指令集架构在处理器中执行的方法</p>
<p><strong>微处理器</strong>，微米制程</p>
<p><strong>微程序</strong>，每一个微程序包含若干条微指令</p>
<p><strong>微指令</strong>，又称为微码，在CISC架构下，执行功能复杂的指令时，所分解的一系列相对简单的指令；作用是将机器指令与相关的电路实现分离</p>
<p>每一条微指令对应一条或多条<strong>微操作</strong></p>
<p><strong>微程序设计技术</strong>，指的是利用软件技术实现硬件设计的一门技术；克服了组合逻辑控制单元线路庞杂的缺点，相比硬布线更具有规整性、灵活性和可维护性，但由于增加了到控制存储器中读取微指令的时间导致执行速度慢</p>
]]></content>
      <categories>
        <category>体系结构</category>
      </categories>
  </entry>
  <entry>
    <title>libc、glibc 和 glib</title>
    <url>/2023/02/23/libc%E3%80%81glibc-%E5%92%8C-glib/</url>
    <content><![CDATA[<p>libc 和 glibc 都是 Linux 下的 C 函数库。 </p>
<p>libc 是基础库(老的标准库)。</p>
<p>glibc 是标准库。</p>
<p>glib 是GTK+的基础库。</p>
<span id="more"></span>



<h4 id="libc-是-Linux-下的-ANSI-C-函数库；glibc-是-Linux-下的-GUN-C-函数库。"><a href="#libc-是-Linux-下的-ANSI-C-函数库；glibc-是-Linux-下的-GUN-C-函数库。" class="headerlink" title="libc 是 Linux 下的 ANSI C 函数库；glibc 是 Linux 下的 GUN C 函数库。"></a>libc 是 Linux 下的 ANSI C 函数库；glibc 是 Linux 下的 GUN C 函数库。</h4><p>ANSI C 函数库是基本的 C 语言函数库，包含了 C 语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>
<blockquote>
<ol>
<li>&lt;ctype.h&gt;：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</li>
<li>&lt;errno.h&gt;：定义用来报告错误条件的宏；</li>
<li>&lt;float.h&gt;：包含系统的浮点数大小限制；</li>
<li>&lt;math.h&gt;：包含数学库函数的函数原型；</li>
<li>&lt;stddef.h&gt;：包含执行某些计算 C 所用的常见的函数定义；</li>
<li>&lt;stdio.h&gt;：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>
<li>&lt;stdlib.h&gt;：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>
<li>&lt;string.h&gt;：包含字符串处理函数的函数原型；</li>
<li>&lt;time.h&gt;：包含时间和日期操作的函数原型和类型；</li>
<li>&lt;stdarg.h&gt;：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>
<li>&lt;signal.h&gt;：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>
<li>&lt;setjmp.h&gt;：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>
<li>&lt;locale.h&gt;：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。</li>
<li>地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>
<li>&lt;assert.h&gt;：包含宏和信息，用于进行诊断，帮助程序调试。</li>
</ol>
</blockquote>
<p>GNU C 函数库是一种类似于第三方插件的东西。由于 Linux 是用 C 语言写的，所以 Linux 的一些操作是用 C 语言实现的，因此，GUN 组织开发了一个 C 语言的库  以便让我们更好的利用 C 语言开发基于 Linux 操作系统的程序。 不过现在的不同的 Linux 的发行版本对这两个函数库有不同的处理方法，有的可能已经集成在同一个库里了。 </p>
<p><strong>glibc</strong>是linux下面c标准库的实现，即GNU C Library。glibc本身是GNU旗下的C标准库，<strong>后来逐渐成为了Linux的标准c库，而Linux下原来的标准c库Linux libc逐渐不再被维护</strong>。Linux下面的标准c库不仅有这一个，如uclibc、klibc，以及上面被提到的Linux libc，但是<strong>glibc无疑是用得最多的</strong>。glibc在&#x2F;lib目录下的.so文件为libc.so.6。</p>
<h4 id="【glibc-和-glib】"><a href="#【glibc-和-glib】" class="headerlink" title="【glibc 和 glib】"></a>【glibc 和 glib】</h4><p>   错误观点：glib 前面有个 “g” ，所以认为 glib 是 GNU 的东东；同时认为 glibc 是 glib 的一个子集。 </p>
<p>   其实，glib 和 glibc 基本上没有太大联系，可能唯一的共同点就是，其都是 C 编程需要调用的库而已。<br>glib 是 Gtk+ 库和 Gnome 的基础。glib 可以在多个平台下使用，比如 Linux、Unix、Windows 等。glib 为许多标准的、常用的 C 语言结构提供了相应的替代物。 </p>
<p><strong>glib是GTK+的基础库</strong>，它由<strong>基础类型、对核心应用的支持、实用功能、数据类型和对象系统</strong>五个部分组成，可以在[<a href="http://www.gtk.org/">http://www.gtk.org</a> gtk网站]下载其源代码。是一个<strong>综合用途的实用的轻量级的C程序库</strong>，它提供C语言的常用的数据结构的定义、<strong>相关的处理函数，有趣而实用的宏，可移植的封装和一些运行时机能，如事件循环、线程、动态调用、对象系统等的API</strong>。</p>
<p>GTK+是可移植的，当然glib也是可移植的，你可以在linux下，也可以在windows下使用它。使用gLib2.0（glib的2.0版本）编写的应用程序，在<strong>编译时应该在编译命令中加入</strong><code>pkg-config --cflags --libs glib-2.0</code>，如：</p>
<blockquote>
<p>gcc <code>pkg-config --cflags --libs glib-2.0</code> hello.c -o hello</p>
</blockquote>
<p>使用glib最有名的是GNOME</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>libc</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 程序执行相关概念</title>
    <url>/2023/02/21/Java-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>Java 程序执行过程：</p>
<p>源程序(<font color=HotPink>*.java</font>) —(编译器)—&gt; 字节码(<font color=HotPink>*.class</font>) —(解释器)—&gt; 执行</p>
<p>在 Android 中在安装时还需要将 .class 转换为 .dex，将 (stack-based) 转换为 (register-based)，代码会更紧凑 </p>
<span id="more"></span>



<h4 id="1-字节码、汇编码、二进制文件"><a href="#1-字节码、汇编码、二进制文件" class="headerlink" title="1. 字节码、汇编码、二进制文件"></a>1. 字节码、汇编码、二进制文件</h4><p>字节码可以认为是软件指令，需要再被转换为硬件指令才能执行</p>
<h4 id="2-JIT-即时编译"><a href="#2-JIT-即时编译" class="headerlink" title="2. JIT(即时编译)"></a>2. JIT(即时编译)</h4><p>解释器执行过程是：输入的代码(字节码) —&gt; 解释器解释执行 —&gt; 执行结果 </p>
<p>JIT 编译再执行过程是：输入的代码(字节码) —&gt; 编译器编译 —&gt; 执行 —&gt; 执行结果</p>
<p>相比解释器，JIT 多了对热点代码的优化和缓存</p>
<p>说 JIT 比解释器快，说的是 “执行编译后的代码” 比 “解释器解释执行” 快，并不是说 “编译” 比 “解释快”</p>
<p>对于执行次数少的函数，JIT 编译之后再执行得不偿失，需要先编译再执行，不如直接解释执行</p>
<h4 id="3-AOT-提前编译"><a href="#3-AOT-提前编译" class="headerlink" title="3. AOT(提前编译)"></a>3. AOT(提前编译)</h4><p>对热点代码提前编译</p>
<p>在 Android 系统中，会在设备闲置和充电时，选用常用代码进行提前编译</p>
<h4 id="4-JIT-和-AOT"><a href="#4-JIT-和-AOT" class="headerlink" title="4. JIT 和 AOT"></a>4. JIT 和 AOT</h4><p>在 ART 中，JIT 和 AOT 使用的是同一个编译器</p>
<p>编译单位是 method</p>
<br/>



<p>当程序需要动态链接时，只能用 JIT</p>
<p>JIT 可以根据当前硬件情况实时编译生成最优机器指令</p>
<p>JIT 可以根据当前程序的运行情况生成最优的机器指令序列</p>
<p>JIT 编译需要占用运行时资源</p>
<br/>



<p>AOT 可以避免在运行时编译过程是性能和内存损耗</p>
<p>AOT 在程序运行初期就达到最高性能</p>
<p>AOT 显著加快程序启动</p>
<p>AOT 在程序运行前编译会使程序的安装时间增加</p>
<p>AOT 将提前编译好的内容保存会占用更多存储</p>
<h4 id="5-为什么-Java-比-C-x2F-C-慢？"><a href="#5-为什么-Java-比-C-x2F-C-慢？" class="headerlink" title="5. 为什么 Java 比 C&#x2F;C++ 慢？"></a>5. 为什么 Java 比 C&#x2F;C++ 慢？</h4><h4 id="6-JNI"><a href="#6-JNI" class="headerlink" title="6. JNI"></a>6. JNI</h4><h5 id="为什么需要JNI？"><a href="#为什么需要JNI？" class="headerlink" title="为什么需要JNI？"></a>为什么需要JNI？</h5><h5 id="JNI为什么效率低？"><a href="#JNI为什么效率低？" class="headerlink" title="JNI为什么效率低？"></a>JNI为什么效率低？</h5>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JIT</tag>
        <tag>AOT</tag>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title>中断和快速系统调用</title>
    <url>/2022/11/30/%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BF%AB%E9%80%9F%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>在 x86 中，系统调用有两种方式，<code>int 0x80</code> 是一般系统调用，<code>syscall</code> 和 <code>sysenter</code> 是快速系统调用，</p>
<span id="more"></span>
<h4 id="int-0x80-和-iret：">int 0x80 和 iret：</h4>
<ol>
<li class="lvl-3">
<p>eax 保存中断号(此处对应系统调用号)</p>
</li>
<li class="lvl-3">
<p>由用户栈切换至内核栈，esp 和 ss</p>
<ul class="lvl-2">
<li class="lvl-5">Linux 中每个进程都有自己的内核栈</li>
</ul>
</li>
<li class="lvl-3">
<p>将用户态状态压到内核栈，ss、esp、eflags、cs、eip</p>
</li>
<li class="lvl-3">
<p>根据中断号找到相应的中断处理函数</p>
</li>
<li class="lvl-3">
<p>iret，该指令会将用户态状态恢复</p>
</li>
</ol>
<h4 id="syscall-和-sysenter">syscall 和 sysenter</h4>
<p>区别在于使用的指令集架构不同</p>
<p>The fast system call interface is yet another difference.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>Intel</strong> supports <code>SYSENTER</code> in all modes1 - Legacy Mode (or, on the few 32-bit only Intel CPUs, simply Protected Mode), Long Mode and Compatibility Mode. (It doesn’t work in Real Mode, obviously, and the from now on I’m ignoring it.)</p>
</li>
<li class="lvl-2">
<p><strong>Intel</strong> supports <code>SYSCALL</code> <strong>only in 64-bit Long Mode</strong>2 (not compat. mode). It also requires setting a bit in some MSR.</p>
</li>
<li class="lvl-2">
<p><strong>AMD</strong> supports <code>SYSENTER</code> <strong>only in Legacy Mode</strong>3, not in any of the Long Mode submodes.</p>
</li>
<li class="lvl-2">
<p>AMD supports <code>SYSCALL</code> in all modes4.</p>
</li>
</ul>
<p>So as the <a href="http://wiki.osdev.org/SYSENTER">OSDEV page on the topic says</a>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>In 64-bit Long Mode - only <code>SYSCALL</code> works on both ISAs. (<code>SYSENTER</code> doesn’t work on AMD.)</strong></p>
</li>
<li class="lvl-2">
<p><strong>In Legacy Mode - only <code>SYSENTER</code> works on both ISAs. (<code>SYSCALL</code> doesn’t work on Intel.)</strong></p>
</li>
<li class="lvl-2">
<p>There’s no single instruction that works on both Intel and AMD in Compatibility Mode (<code>SYSENTER</code> doesn’t work on AMD and <code>SYSCALL</code> doesn’t work on Intel), but there’s no need for one. A 32-bit kernel will stay in Legacy Mode after boot.</p>
</li>
</ul>
<h4 id="快速系统调用机制">快速系统调用机制</h4>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>系统调用</tag>
      </tags>
  </entry>
  <entry>
    <title>syscall 和 sysenter</title>
    <url>/2022/11/30/syscall-%E5%92%8C-sysenter/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>syscall &amp; sysret</th>
<th>sysenter &amp; sysexit</th>
</tr>
</thead>
<tbody><tr>
<td>Intel</td>
<td>所有模式</td>
<td>仅 64 位长模式</td>
</tr>
<tr>
<td>AMD</td>
<td>仅传统模式</td>
<td>所有模式</td>
</tr>
</tbody></table>
<span id="more"></span>



<p>syscall 和 sysenter 都是快速系统调用指令，快速地切换 ring3 到 ring 0</p>
<p>在使用时，需要在 MSR(Model Specific Registers) 中设置入口和栈</p>
<p>在 seL4 x86_64 (Intel) 中，有</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* sysenter */</span></span><br><span class="line">x86_wrmsr(IA32_SYSENTER_CS_MSR, (<span class="type">uint64_t</span>)(<span class="type">word_t</span>)SEL_CS_0);</span><br><span class="line">x86_wrmsr(IA32_SYSENTER_EIP_MSR, (<span class="type">uint64_t</span>)(<span class="type">word_t</span>)&amp;handle_syscall);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* syscall */</span></span><br><span class="line">x86_wrmsr(IA32_LSTAR_MSR, (<span class="type">uint64_t</span>)&amp;handle_fastsyscall);</span><br><span class="line">x86_wrmsr(IA32_STAR_MSR, ((<span class="type">uint64_t</span>)SEL_CS_0 &lt;&lt; <span class="number">32</span>) | ((<span class="type">uint64_t</span>)SEL_CS_3 &lt;&lt; <span class="number">48</span>));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>系统调用</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache 组织方式</title>
    <url>/2022/11/29/Cache-%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>Cache 寻址需要 index、tag、offset</p>
<p>index 找到 cache set</p>
<p>tag 找到 cache line</p>
<p>offset 找到字节</p>
<span id="more"></span>



<ol>
<li><p>N 路组相联表示一个 set 中有 N 个 cache line</p>
</li>
<li><p>三者组织顺序：tag | index | offset</p>
<p>之所以将 offset 放在中间，是考虑了空间局部性(spacial locality)</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">例如：(CSAPP 中的例子)</span><br><span class="line">4组高速缓存，index：00<span class="number"> 01 </span>10 11</span><br><span class="line">倘若高位索引，0000 -<span class="number"> 0011 </span>都在<span class="number"> 00 </span>set 中</span><br><span class="line">倘若中位索引，0000 -<span class="number"> 0011 </span>均匀分布在<span class="number"> 4 </span>个 set</span><br><span class="line">显然按照一般的连续访问规则，中位索引可以获得更高的局部性</span><br></pre></td></tr></table></figure>


</li>
<li><p>cache 有两个问题：</p>
<ul>
<li>歧义：一个虚拟地址对应到两个不同的物理地址，切换进程时需要 flush 缓存(<strong>线程ID区分？想起来的时候补充</strong>)</li>
<li>别名：两个不同的虚拟地址对应到一个物理地址，会增加维护一致性的难度</li>
</ul>
<blockquote>
<p>tag 取自虚拟地址导致歧义，index 取自虚拟地址导致别名</p>
</blockquote>
</li>
<li><p>cache 的组织方式有三种，VIVT、VIPT、PIPT</p>
<ul>
<li>VIVT 有歧义和别名问题</li>
<li>PIPT 在 cache 的同时，MMU 将 PA 翻译为 VA，不存在歧义和别名问题，但增加了硬件设计的难度</li>
<li>PIVT 没有意义，需要等到 MMU 结束后才能根据 PI(index) 找 set，再比较 VT(tag)</li>
<li>VIPT 可以避免歧义，但不能完全避免别名<ul>
<li>避免歧义：因为以物理地址作为 tag，因此可以避免歧义；具体来说，需要保证一个虚拟地址加上映射的物理地址，只能在 cache 中找到一个，也就是说 PT 需要满足条件，使 VI + PT 能找到唯一的值；假设以32位CPU为例，页表映射最小单位是4KB。我们假设虚拟地址&lt;12:4&gt;位(这是一个有别名问题的VIPT Cache)作为index，于此同时将虚拟地址&lt;31:12&gt;发送到MMU转换得到物理地址的&lt;31:12&gt;，这里我们把&lt;31:12&gt;作为tag，并不是&lt;31:13&gt;</li>
<li>避免别名：当 <code>cache size / 总 way 数 ≤ page size</code> ，VI &#x3D; PI，没有别名问题；否则会有，避免方式是使返回地址总是 <code>cache size / set 数</code> 对齐，保证对应到不同的 set</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>参考：</p>
<ol>
<li>避免别名：<a href="https://zhuanlan.zhihu.com/p/503078043">https://zhuanlan.zhihu.com/p/503078043</a> (最后一个例子有问题)</li>
<li>避免歧义和别名：<a href="https://zhuanlan.zhihu.com/p/107096130">https://zhuanlan.zhihu.com/p/107096130</a> (PT 大小有问题)</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统发展趋势</title>
    <url>/2022/11/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><h5 id="硬件："><a href="#硬件：" class="headerlink" title="硬件："></a>硬件：</h5><p>大背景：摩尔定律失效(表现)</p>
<p>原因：量子隧穿效应，设计成本剧增，(应该还有一点)  高温和漏电</p>
<p>从技术的角度看，随着硅片上线路密度增加，其复杂性和差错率也将呈指数增长，同时也使全面而彻底的芯片测试几乎成为不可能。一旦芯片上线条的宽度达到纳米数量级时，相当于只有几个分子的大小，这种情况下材料的物理、化学性能将发生质的变化，致使采用现行工艺的半导体器件不能正常工作，摩尔定律从走向尽头</p>
<p>发展方向：多核、众核()、异构硬件(领域专用)、超异构超融合(领域专用的下一步)</p>
<p>超异构超融合：特斯拉的超异构、英伟达的超融合</p>
<p>需求：可扩展性、针对性的优化、虚拟化技术融合？</p>
<h5 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h5><p>大背景：</p>
<p>原因：</p>
<p>需求：分布式、单机、安全(单拎出来)</p>
<p>分布式的挑战：异构的机器和网络、节点故障、网络不可靠；来自不确定性，不确定什么时候crash、断电、磁盘损坏、网络延迟、通信对端是否处理了发送的消息；分布式的规模放大了不确定性</p>
<p>需求：</p>
<ul>
<li>可扩展性(动态伸缩)</li>
<li>可靠性和可用性(7*24小时提供服务；计算结构正确、存储的数据不丢失)</li>
<li>高性能(不同系统对性能的衡量指标不同；最常见的高并发单位时间内处理的任务越多越好、低延迟每个任务的平均时间越少越好)</li>
<li>一致性(为了提高可用性可靠性，一般会引入冗余，一致性是保证节点上的状态一致，一致有很多等级，越强，对用户越友好，但是会制约系统的可用性；等级低，用户需要兼容数据不一致的情况，但系统的可用性、并发性会高)</li>
<li>任务调度(？可扩展性有，一致性有)</li>
</ul>
<p>《分布式系统原理介绍》</p>
<p>单机的挑战：</p>
<p>领域专用设备增多(端设备增多)；领域专用应用，在领域需求方面对操作系统的要求更高；应用的范围扩大，主要是需求融合</p>
<p>可(易)定制性、高性能(不同领域不同，吞吐率？和实时性)、混合关键系统</p>
<p>安全的挑战：(安全和分布式、单机不在一个维度上)</p>
<p>人-机-物融合(人-机-物融合在前面没有提到)，安全性弱意味着人的生命财产安全不受保障</p>
<p>应用复杂，软件工程扩大、敏捷开发，迭代快，引入漏洞速度远远快于发现漏洞和解决漏洞的速度且供给面广</p>
<p>云和数据中心上的数据集中，一旦出现漏洞，所有数据安全都将受到威胁</p>
<p>国家之间的战争，(俄乌战争，航天；信息窃取，但好像信息泄露主要是因为内部人员管理不善)</p>
<p>隔离性属于安全？(怎么体现？)</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>发展趋势</tag>
      </tags>
  </entry>
  <entry>
    <title>18.4 Sum</title>
    <url>/2022/11/15/18-4-Sum/</url>
    <content><![CDATA[<dev style="display:none">

<p>(<strong style="color:green">Easy</strong>)</p>
<p>(<strong style="color:#f0ad4e">Medium</strong>)</p>
<p>(<strong style="color:red">Hard</strong>)</p>
</dev>



<p>18.4 Sum (<strong style="color:#f0ad4e">Medium</strong>)</p>
<p>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p>
<ul>
<li><code>0 &lt;= a, b, c, d &lt; n</code></li>
<li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.</li>
<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>
</ul>
<p>You may return the answer in <strong>any order</strong>.</p>
<span id="more"></span>



<p><strong>Example 1:</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,0,<span class="string">-1</span>,0,<span class="string">-2</span>,2], target = 0</span><br><span class="line">Output: [[<span class="string">-2</span>,<span class="string">-1</span>,1,2],[<span class="string">-2</span>,0,0,2],[<span class="string">-1</span>,0,0,1]]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>], target = <span class="number">8</span></span><br><span class="line">Output: <span class="string">[[2,2,2,2]]</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
</ul>
<h4 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h4><details>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">/* 仿照3sum，固定 i、j、k 找第四个数 */</span></span><br><span class="line">        <span class="comment">/* 需要注意类型转换，int -&gt; long */</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        unordered_map&lt;<span class="type">long</span>, <span class="type">int</span>&gt; hashmap;</span><br><span class="line">        <span class="type">int</span> i, j, k;</span><br><span class="line">        <span class="type">long</span> tmpsum;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            hashmap[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (k = j + <span class="number">1</span>; k &lt; len; k++)&#123;</span><br><span class="line">                    tmpsum = (<span class="type">long</span>)target - ((<span class="type">long</span>)nums[i] + nums[j] + nums[k]);</span><br><span class="line">                    <span class="keyword">if</span> (hashmap.<span class="built_in">count</span>(tmpsum) &amp;&amp; hashmap[tmpsum] &gt; k)&#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[k], (<span class="type">int</span>)tmpsum&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    k = hashmap[nums[k]];</span><br><span class="line">                &#125;</span><br><span class="line">                j = hashmap[nums[j]];</span><br><span class="line">            &#125;</span><br><span class="line">            i = hashmap[nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>



<h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><details>




</details>



<h5 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h5><p>时间复杂度 O()，空间复杂度 O()</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>16.3 Sum Closest</title>
    <url>/2022/11/14/16-3-Sum-Closest/</url>
    <content><![CDATA[<p>16.3 Sum Closest (<strong style="color:#f0ad4e">Medium</strong>)</p>
<p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p>
<p>Return <em>the sum of the three integers</em>.</p>
<p>You may assume that each input would have exactly one solution.</p>
<span id="more"></span>



<p><strong>Example 1:</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Input:</span> nums = [-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">4</span>], target = <span class="number">1</span></span><br><span class="line"><span class="symbol">Output:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">Explanation:</span> The sum that <span class="built_in">is</span> closest <span class="keyword">to</span> the target <span class="built_in">is</span> <span class="number">2</span>. (-<span class="number">1</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">2</span>).</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Input:</span> nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], target = <span class="number">1</span></span><br><span class="line"><span class="symbol">Output:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">Explanation:</span> The sum that <span class="built_in">is</span> closest <span class="keyword">to</span> the target <span class="built_in">is</span> <span class="number">0</span>. (<span class="number">0</span> + <span class="number">0</span> + <span class="number">0</span> = <span class="number">0</span>).</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 500</code></li>
<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>
<li><code>-104 &lt;= target &lt;= 104</code></li>
</ul>
<h4 id="我的思路-超时，不确定对错"><a href="#我的思路-超时，不确定对错" class="headerlink" title="我的思路(超时，不确定对错)"></a>我的思路(超时，不确定对错)</h4><details>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> i, j, k, tmpsum;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++)&#123;</span><br><span class="line">            j = i + <span class="number">1</span>;</span><br><span class="line">            k = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">                tmpsum = nums[i] + nums[j] + nums[k];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(target - tmpsum) &lt; <span class="built_in">abs</span>(target - res))&#123;</span><br><span class="line">                    res = tmpsum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (tmpsum == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpsum &lt; target) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>



<h4 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h4><details>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> i, j, k, tmpsum;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++)&#123;</span><br><span class="line">            j = i + <span class="number">1</span>;</span><br><span class="line">            k = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">                tmpsum = nums[i] + nums[j] + nums[k];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(target - tmpsum) &lt; <span class="built_in">abs</span>(target - res))&#123;</span><br><span class="line">                    res = tmpsum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (tmpsum == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpsum &lt; target) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>



<h5 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h5><p>时间复杂度 O(n<sup>2</sup>)，空间复杂度 O(1)</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol>
<li>先排序</li>
<li>双指针，固定 i，从两端移动 j 和 k；当出现 target 时直接返回</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>15.3 Sum</title>
    <url>/2022/11/13/15-3-Sum/</url>
    <content><![CDATA[<p>15.3 Sum (<strong style="color:#f0ad4e">Medium</strong>)</p>
<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>
<p>Notice that the solution set must not contain duplicate triplets.</p>
<span id="more"></span>



<p><strong>Example 1:</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Input</span>: nums =<span class="meta"> [-1,0,1,2,-1,-4]</span></span><br><span class="line"><span class="attribute">Output</span>:<span class="meta"> [[-1,-1,2],[-1,0,1]]</span></span><br><span class="line"><span class="attribute">Explanation</span>: </span><br><span class="line"><span class="attribute">nums</span>[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>] = (-<span class="number">1</span>) + <span class="number">0</span> + <span class="number">1</span> = <span class="number">0</span>.</span><br><span class="line"><span class="attribute">nums</span>[<span class="number">1</span>] + nums[<span class="number">2</span>] + nums[<span class="number">4</span>] = <span class="number">0</span> + <span class="number">1</span> + (-<span class="number">1</span>) = <span class="number">0</span>.</span><br><span class="line"><span class="attribute">nums</span>[<span class="number">0</span>] + nums[<span class="number">3</span>] + nums[<span class="number">4</span>] = (-<span class="number">1</span>) + <span class="number">2</span> + (-<span class="number">1</span>) = <span class="number">0</span>.</span><br><span class="line"><span class="attribute">The</span> distinct triplets are<span class="meta"> [-1,0,1] and [-1,-1,2].</span></span><br><span class="line"><span class="meta">Notice that the order of the output and the order of the triplets does not matter.</span></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Input:</span> nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="symbol">Output:</span> []</span><br><span class="line"><span class="symbol">Explanation:</span> The only possible triplet does <span class="built_in">not</span> sum up <span class="keyword">to</span> <span class="number">0</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Input: nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">Output: <span class="string">[[0,0,0]]</span></span><br><span class="line">Explanation: The only possible triplet sums up to <span class="number">0.</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<h4 id="我的思路1-错误的"><a href="#我的思路1-错误的" class="headerlink" title="我的思路1(错误的)"></a>我的思路1(错误的)</h4><details>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">/* 先记录前两位的和及索引，再遍历nums，对每一位找-nums[k]对应的索引列表 */</span></span><br><span class="line">        <span class="comment">/* 记录索引是为了避免一个数用两次 */</span></span><br><span class="line">        <span class="comment">/* 一开始没有排序，会导致出现重复结果，&#123;1, 0, -1, 1&#125; */</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; twosum;</span><br><span class="line">        <span class="type">int</span> i, j, k, l, tmpsum;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;::iterator it;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">                tmpsum = nums[i] + nums[j];</span><br><span class="line">                it = twosum.<span class="built_in">find</span>(tmpsum);</span><br><span class="line">                <span class="keyword">if</span> (it == twosum.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    twosum.<span class="built_in">insert</span>(pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;(tmpsum, &#123;i, j&#125;));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/* 结果中重复值需要被去掉，倘若当前 nums[i] 已经出现过，那么不会被重复加进 */</span></span><br><span class="line">                    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; (*it).second.<span class="built_in">size</span>(); k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (nums[i] == nums[(*it).second[k]])&#123;</span><br><span class="line">                            flag = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">                        (*it).second.<span class="built_in">push_back</span>(i);</span><br><span class="line">                        (*it).second.<span class="built_in">push_back</span>(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">2</span>; k &lt; len; k++)&#123;</span><br><span class="line">            it = twosum.<span class="built_in">find</span>(<span class="number">0</span>-nums[k]);</span><br><span class="line">            <span class="keyword">if</span> (it != twosum.<span class="built_in">end</span>())&#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; index = (*it).second;</span><br><span class="line">                <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; index.<span class="built_in">size</span>(); l += <span class="number">2</span>)&#123;</span><br><span class="line">					<span class="comment">/* 避免重复，否则考虑 &#123;1, 1, 0, -1&#125;，&#123;1, 0, -1&#125; 会被统计两次 */</span></span><br><span class="line">                    <span class="keyword">if</span> (k &lt;= index[l+<span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;nums[index[l]], nums[index[l+<span class="number">1</span>]], nums[k]&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>



<h4 id="我的思路2-错误"><a href="#我的思路2-错误" class="headerlink" title="我的思路2(错误)"></a>我的思路2(错误)</h4><details>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">/* 三指针，ij从左边，k从右边，如果sum&lt;=0，ij往右移，否则k往左移 */</span></span><br><span class="line">        <span class="comment">/* ij移动优先级：i高于j */</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>, k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; j &lt; k) &#123;</span><br><span class="line">            <span class="type">int</span> tmpsum = nums[i] + nums[j] + nums[k];</span><br><span class="line">            <span class="keyword">if</span> (tmpsum == <span class="number">0</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[k]&#125;);</span><br><span class="line">                <span class="keyword">if</span> (j == k - <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i<span class="number">-1</span>] == nums[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmpsum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j - <span class="number">1</span>)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i<span class="number">-1</span>] == nums[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 问题：&#123;0, 0, 0, 0&#125; 的重复问题没有避免 */</span></span><br></pre></td></tr></table></figure>

</details>



<h4 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h4><details>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashmap;</span><br><span class="line">        <span class="type">int</span> i, j, tmpsum;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            hashmap[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">                tmpsum = <span class="number">0</span> - (nums[i] + nums[j]);</span><br><span class="line">                <span class="keyword">if</span> (hashmap.<span class="built_in">count</span>(tmpsum) &amp;&amp; hashmap[tmpsum] &gt; j)&#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], tmpsum&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                j = hashmap[nums[j]];</span><br><span class="line">            &#125;</span><br><span class="line">            i = hashmap[nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>



<h5 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h5><p>时间复杂度 O(n<sup>2</sup>)，空间复杂度 O(n)</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol>
<li>我的代码中只考虑了前两位的重复情况，没有考虑 k 重复，考虑 {0, 0, 0, 0}；初始的算法中没有 sort，但是 sort 也并不能使避免全部的重复，举例同1</li>
<li>我的代码因为算法问题，需要对重复做很多额外的处理</li>
<li>有两个关键点：<ol>
<li><strong>要先对数组排序</strong>，一是避免 {1, 0, -1} 和 {-1, 0 ,1} 这种重复，二是倘若最小值大于0，那么直接返回</li>
<li><strong>避免重复</strong><ul>
<li>排序</li>
<li><code>hashmap[tmpsum] &gt; j</code>，从左侧开始遍历 i 和 j，为避免重复，第三个数必须从 j 右侧找</li>
<li><code>j = hashmap[nums[j]]</code> 和 <code>i = hashmap[nums[i]]</code>，hashmap 中存的是值的最大 index，通过这种方式找到当前 nums[j] 和 nums[i] 的最大 index，在下次循环中自增会避免重复</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>11. Container With Most Water</title>
    <url>/2022/11/12/11-Container-With-Most-Water/</url>
    <content><![CDATA[<ol start="11">
<li>Container With Most Water (<strong style="color:#f0ad4e">Medium</strong>)</li>
</ol>
<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>
<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>
<p>Return <em>the maximum amount of water a container can store</em>.</p>
<p><strong>Notice</strong> that you may not slant the container.</p>
<span id="more"></span>



<p><strong>Example 1:</strong></p>
<p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="img"></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Input: height = [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br><span class="line">Explanation: The above vertical lines are represented by<span class="built_in"> array </span>[1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Input</span>: height =<span class="meta"> [1,1]</span></span><br><span class="line"><span class="attribute">Output</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == height.length</code></li>
<li><code>2 &lt;= n &lt;= 105</code></li>
<li><code>0 &lt;= height[i] &lt;= 104</code></li>
</ul>
<h4 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h4><details>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 双指针基本思路 */</span></span><br><span class="line">        <span class="comment">/* 只有当遇到更高的 height 项才调整 */</span></span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>, left = <span class="number">0</span>, right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            tmp = <span class="built_in">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">            result = <span class="built_in">max</span>(result, tmp);</span><br><span class="line">            <span class="comment">/* 如果使left高，那么right左移；如果相等，都可以 */</span></span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right])&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>



<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">8</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line">初始：		<span class="number">1</span> <span class="number">7</span>, <span class="number">8</span></span><br><span class="line"><span class="built_in">left</span> 右移：<span class="number">8</span> <span class="number">7</span>，<span class="number">49</span></span><br><span class="line"><span class="built_in">right</span>左移：<span class="number">8</span> <span class="number">3</span>, <span class="number">49</span></span><br><span class="line"><span class="built_in">right</span>左移：<span class="number">8</span> <span class="number">8</span>, <span class="number">49</span></span><br><span class="line"><span class="built_in">left</span> 右移：<span class="number">6</span> <span class="number">8</span>, <span class="number">49</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h5 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h5><p>时间复杂度 O(n)，空间复杂度 O(1)</p>
<h4 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h4><details>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 双指针，起始状态是头和尾 */</span></span><br><span class="line">        <span class="comment">/* 一开始是left指针向右移，当所得容量变大时，使right指针向左移 */</span></span><br><span class="line">        <span class="type">int</span> len = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> result = <span class="built_in">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* flag 指示指针的移动方向 */</span></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (left != right &amp;&amp; left &lt; right) &#123;</span><br><span class="line">            left += flag;</span><br><span class="line">            right += ~flag;</span><br><span class="line">            tmp = <span class="built_in">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; result)&#123;</span><br><span class="line">                result = tmp;</span><br><span class="line">                flag = ~flag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</details>



<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol>
<li>双指针方向应该随着两端的高度，而不是根据 res 调整</li>
<li>res 时刻都是当前状态的最大值</li>
<li>从两端向中间，每次container的宽度都会减一，因而每次的宽度都比后面循环的长，因为“桶的容量取决于短板”，因而应到保留高板，调整另一端，才有可能更大</li>
<li>当两端的值相等时(假设为x)，移动哪端都可以，都移动也可以：<ul>
<li>倘若 height[left - right] 都小于 x，那么当前res就是最大res</li>
<li>倘若存在 height[k] 大于x，那么由于“桶的容量取决于短板”，当前res仍是最大res</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 类的静态成员变量</title>
    <url>/2022/09/05/C-%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>C++ 类的静态成员变量一定需要在全局定义</p>
<p>声明只是定义一个符号，不占用存储空间</p>
<p>定义是分配内存空间</p>
<p>初始化是赋一个初始值</p>
<p>C++ 中类的静态成员变量只是声明，没有定义，没有分配空间</p>
<p>需要在类的外面定义，实际上是给静态成员变量分配内存</p>
<span id="more"></span>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> a;	<span class="comment">/* 声明但未定义，还为分配内存 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; A::a &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译以上代码会出现 undefined reference to <code>A::a</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> a;	<span class="comment">/* 声明但未定义，还为分配内存 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A::a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; A::a &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码打印出 0，默认初始化为 0，也可以 <code>int A::a=3</code>，定义后初始化</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++ static</tag>
      </tags>
  </entry>
  <entry>
    <title>书单和算法</title>
    <url>/2022/08/30/%E4%B9%A6%E5%8D%95%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul>
<li><p><a href="https://leetcode.com/">Leetcode</a></p>
</li>
<li><p><a href="https://www.nowcoder.com/exam/company">牛客</a></p>
</li>
</ul>
<h3 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h3><ul>
<li><h5 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h5><ul>
<li><input disabled="" type="checkbox"> <strong>深入理解计算机系统</strong></li>
<li><input disabled="" type="checkbox"> <strong>现代操作系统(Modern Operating Systems)</strong></li>
<li><input disabled="" type="checkbox"> <strong>现代操作系统：原理与实现</strong></li>
<li><input disabled="" type="checkbox"> <strong>操作系统概念(Operating System Concepts)</strong></li>
<li><input disabled="" type="checkbox"> 自己动手写操作系统</li>
<li><input disabled="" type="checkbox"> 操作系统原理</li>
<li><input disabled="" type="checkbox"> Linux 内核设计与实现</li>
<li><input disabled="" type="checkbox"> 程序是怎样跑起来的</li>
<li><input disabled="" type="checkbox"> 鸟哥的 Linux 私房菜</li>
</ul>
</li>
<li><h5 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h5><ul>
<li><input disabled="" type="checkbox"> <strong>计算机网络-谢希仁</strong></li>
<li><input disabled="" type="checkbox"> <strong>计算机网络：自顶向下方法</strong></li>
<li><input disabled="" type="checkbox"> 计算机网络：系统方法(Computer Networks, A systems Approach)</li>
<li><input disabled="" type="checkbox"> <strong>TCP&#x2F;IP 详解卷一</strong></li>
<li><input disabled="" type="checkbox"> <strong>TCP&#x2F;IP 详解卷二</strong></li>
<li><input disabled="" type="checkbox"> TCP&#x2F;IP 详解卷三</li>
<li><input disabled="" type="checkbox"> HTTP 权威指南</li>
<li><input disabled="" type="checkbox"> HTTP 核心总结</li>
</ul>
</li>
<li><h5 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h5><ul>
<li><input disabled="" type="checkbox"> <strong>Compilers: Principles, Techniques, and Tools(龙书)</strong></li>
<li><input disabled="" type="checkbox"> <strong>Modern Compiler Implementation in C(虎书)</strong></li>
<li><input disabled="" type="checkbox"> Modern Compiler Design(现代编译程序设计)</li>
<li><input disabled="" type="checkbox"> 编译原理及实践</li>
<li><input disabled="" type="checkbox"> Engineering a Compiler(蛮多人推)</li>
<li><input disabled="" type="checkbox"> Advanced Compiler Design and Implementation(鲸书)</li>
</ul>
</li>
<li><h5 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h5><ul>
<li><input disabled="" type="checkbox"> 大话处理器——处理器基础知识读本(万木杨)(有趣)</li>
<li><input disabled="" type="checkbox"> <strong>计算机组成与设计：硬件&#x2F;软件接口</strong></li>
<li><input disabled="" type="checkbox"> <strong>计算机体系结构：量化研究方法</strong></li>
<li><input disabled="" type="checkbox"> 计算机组成与系统结构</li>
<li><input disabled="" type="checkbox"> 计算机组成原理</li>
</ul>
</li>
<li><h5 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h5><ul>
<li><input disabled="" type="checkbox"> C++ 程序设计语言(The C++ Programming Language)</li>
<li><input disabled="" type="checkbox"> C++ 程序标准库(C++ Standard Library Tutorial and Reference)</li>
<li><input disabled="" type="checkbox"> The Standard C Library</li>
<li><input disabled="" type="checkbox"> <strong>C++ Primer</strong></li>
<li><input disabled="" type="checkbox"> <strong>C++ Primer Plus</strong></li>
<li><input disabled="" type="checkbox"> <strong>C++ 编程思想(Thinking in C++)</strong></li>
<li><input disabled="" type="checkbox"> 面向对象程序设计 —— C++语言描述</li>
<li><input disabled="" type="checkbox"> 数据结构(C++语言版)</li>
<li><input disabled="" type="checkbox"> <strong>Effective C++</strong></li>
<li><input disabled="" type="checkbox"> Exceptional C++</li>
<li><input disabled="" type="checkbox"> More Exceptional C++</li>
<li><input disabled="" type="checkbox"> <strong>C++ 编程规范</strong></li>
</ul>
</li>
<li><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><ul>
<li><input disabled="" type="checkbox"> 数据库系统概论(王珊&#x2F;萨师煊)</li>
<li><input disabled="" type="checkbox"> Database System Concepts(数据库系统概论)</li>
<li><input disabled="" type="checkbox"> 分布式数据库系统原理</li>
<li><input disabled="" type="checkbox"> Database System Implementation(数据库系统实现)</li>
<li><input disabled="" type="checkbox"> MySQL 必知必会</li>
<li><input disabled="" type="checkbox"> 高性能 MySQL</li>
<li><input disabled="" type="checkbox"> MySQL 技术内幕：innodb 存储引擎</li>
</ul>
</li>
<li><h5 id="公有云-x2F-分布式数据库…"><a href="#公有云-x2F-分布式数据库…" class="headerlink" title="公有云&#x2F;分布式数据库…"></a>公有云&#x2F;分布式数据库…</h5></li>
</ul>
]]></content>
      <categories>
        <category>清单</category>
      </categories>
  </entry>
  <entry>
    <title>2022年秋招</title>
    <url>/2022/08/30/2022%E5%B9%B4%E7%A7%8B%E6%8B%9B/</url>
    <content><![CDATA[<h3 id="2022-秋招">2022 秋招</h3>
<p><a href="https://career.huawei.com/reccampportal/portal5/index.html">华为</a>：通用软件开发工程师、操作系统开发工程师(7月开始)</p>
<p><a href="https://talent.alibaba.com/?lang=zh">阿里/蚂蚁</a>：研发工程师 C/C++ (8月底-9月底)</p>
<p><a href="https://app.mokahr.com/apply/armchina/885#/">ARM</a>：软件工程师(8月中旬开始)</p>
<p><a href="https://jobs.bytedance.com/">字节</a>：后端开发工程师(8月初开始)</p>
<p><a href="https://careers.pinduoduo.com/campus/">拼多多</a>：(8月初开始-9月初)</p>
<p><a href="https://www.nvidia.cn/about-nvidia/careers/">英伟达</a></p>
<p><a href="https://chinacampus.jobs.intel.cn/intel/home/index?page=index">英特尔</a>：(8月开始)</p>
<p>腾讯</p>
<p><a href="https://talent.didiglobal.com/">滴滴</a>：C++ 后端研发工程师(8月底-9月初)</p>
<p><a href="https://jobs.bilibili.com/home">哔哩哔哩</a>：系统研发工程师(8月初-11月中)</p>
<p><a href="https://campus.xiaohongshu.com/">小红书</a>：C++开发工程师(7月中开始)</p>
<p>饿了么</p>
<p>携程</p>
<p>58同城</p>
]]></content>
      <categories>
        <category>清单</category>
      </categories>
  </entry>
  <entry>
    <title>git 撤销某次 push</title>
    <url>/2022/07/22/git-%E6%92%A4%E9%94%80%E6%9F%90%E6%AC%A1-push/</url>
    <content><![CDATA[<p>git 撤销某次 push</p>
<p><strong>–hard 会使修改全部丢失，记得备份！！！</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 找到要回退版本的 commit 版本号</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 回退</span></span><br><span class="line">git reset --hard &lt;版本号&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重新 push</span></span><br><span class="line">git push --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某次 commit 修改了哪些文件</span></span><br><span class="line">git show &lt;版本号&gt; --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具命令</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux cp 复制文件夹</title>
    <url>/2022/07/22/Linux-cp-%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<p>源目录是 dir1，目标目录为 dir2，将 dir1 下所有文件复制到 dir2 下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dir2 不存在</span></span><br><span class="line"><span class="built_in">cp</span> -r dir1 dir2</span><br><span class="line"></span><br><span class="line"><span class="comment"># dir2 存在</span></span><br><span class="line"><span class="comment">## cp -r dir1 dir2 会将 dir1 文件夹复制到 dir2 下</span></span><br><span class="line"><span class="built_in">cp</span> -r dir1/* dir2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>docker 镜像使 centos-root 分区容量爆满</title>
    <url>/2022/07/18/docker-%E9%95%9C%E5%83%8F%E4%BD%BF-centos-root-%E5%88%86%E5%8C%BA%E5%AE%B9%E9%87%8F%E7%88%86%E6%BB%A1/</url>
    <content><![CDATA[<p>docker 镜像默认放在 &#x2F;centos-root 分区下，镜像多或大都很容易将该分区吃满</p>
<p>三种解决方案：</p>
<ol>
<li>清理镜像</li>
<li>磁盘扩容</li>
<li>移动 docker 镜像目录</li>
</ol>
<span id="more"></span>



<h4 id="清理镜像"><a href="#清理镜像" class="headerlink" title="清理镜像"></a>清理镜像</h4>   <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> [CONTAINER ID]</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> [CONTAINER ID]</span><br><span class="line"></span><br><span class="line">docker rmi [IMAGE ID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理已退出镜像</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a | grep Exit | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有未被 tag 标记和未被容器使用的镜像</span></span><br><span class="line">docker image prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有未被容器使用的镜像</span></span><br><span class="line">docker image prune -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有停止运行的容器</span></span><br><span class="line">docker container prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有未被挂载的卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有网络</span></span><br><span class="line">docker network prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 docker 所有资源</span></span><br><span class="line">docker system prune</span><br><span class="line"></span><br><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure>



<h4 id="磁盘扩容"><a href="#磁盘扩容" class="headerlink" title="磁盘扩容"></a>磁盘扩容</h4><p>[TODO] 留坑…</p>
<h4 id="移动-docker-镜像目录"><a href="#移动-docker-镜像目录" class="headerlink" title="移动 docker 镜像目录"></a>移动 docker 镜像目录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save 镜像</span></span><br><span class="line">docker images</span><br><span class="line">docker save IAMGE [IMAGE...] | gzip &gt; docker-images.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># load 镜像</span></span><br><span class="line">docker load -i docker-images.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像从一个主机迁移到另一个主机</span></span><br><span class="line">docker save IAMGE [IMAGE...] | bzip2 | ssh @xx.xxx.xx.x <span class="string">&quot;cat | docker load&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像目录</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /home/docker</span><br><span class="line">sudo vi /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;data-root&quot;</span>: <span class="string">&quot;/home/docker&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh 连接远程 Linux 服务器</title>
    <url>/2022/07/17/ssh-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%20Linux%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>ssh 连接远程 Linux 服务器</p>
<span id="more"></span>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~	<span class="comment"># 若是 root 用户，记得 su $&#123;username&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> .ssh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> xxx.pub &gt;&gt; authorized_keys	<span class="comment"># 将公钥写入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys	<span class="comment"># 必须 600</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh	<span class="comment"># 755也可以，不能被其他用户写</span></span><br><span class="line"></span><br><span class="line">ssh <span class="variable">$&#123;username&#125;</span>@IP -p port -i xxx	<span class="comment"># -i 私钥</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 用户管理</title>
    <url>/2022/07/17/Linux-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>Linux 用户管理…</p>
<span id="more"></span>



<ol>
<li><p>用户管理：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增用户</span></span><br><span class="line">useradd -m <span class="variable">$&#123;username&#125;</span></span><br><span class="line"></span><br><span class="line">passwd <span class="variable">$&#123;username&#125;</span></span><br><span class="line"></span><br><span class="line">usermod -a -G sudo <span class="variable">$&#123;username&#125;</span>	<span class="comment"># -a 保留原有组，-G 指定新组</span></span><br><span class="line"></span><br><span class="line">useradd -m -s /bin/bash <span class="variable">$&#123;username&#125;</span></span><br><span class="line"></span><br><span class="line">useradd -m -G sudo -s /bin/bash <span class="variable">$&#123;username&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">userdel -r <span class="variable">$&#123;username&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户</span></span><br><span class="line"><span class="built_in">groups</span> <span class="variable">$&#123;username&#125;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>用户组管理</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupadd <span class="variable">$&#123;group&#125;</span></span><br><span class="line"></span><br><span class="line">groupdel <span class="variable">$&#123;group&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /etc/group</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 服务器科学上网</title>
    <url>/2022/07/17/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>Linux + Clash 翻墙 …</p>
<span id="more"></span>



<ol>
<li><p>安装 clash</p>
<p>发布在 <a href="https://github.com/Dreamacro/clash/releases">Releases · Dreamacro&#x2F;clash (github.com)</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装对应版本，一般最新 clash-linux-amd64-vxxxx.gz</span></span><br><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.11.4/clash-linux-amd64-v1.11.4.gz</span><br><span class="line"></span><br><span class="line">gunzip clash-linux-amd64-v1.11.4.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了方便，将解压出来的文件改名为 clash</span></span><br><span class="line"><span class="built_in">mv</span> clash-linux-amd64-v1.11.4.gz clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行以初始化</span></span><br><span class="line">./clash</span><br></pre></td></tr></table></figure>


</li>
<li><p>配置 clash</p>
<p>首次配置后生成配置文件在 ~&#x2F;.config&#x2F;clash</p>
<p>需要 Country.mmdb 和 config.yaml</p>
<p>没有的话从别地儿下载，也在 ~&#x2F;.config 下</p>
</li>
<li><p>设置 <code>clash</code> 直接运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> clash/clash /usr/local/bin/clash</span><br></pre></td></tr></table></figure>


</li>
<li><p>打开代理</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下内容写入 ~/.bashrc</span></span><br><span class="line"><span class="comment"># 7890 是 config.yaml 中的 port</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>() &#123;</span><br><span class="line">	<span class="built_in">unset</span> http_proxy</span><br><span class="line">	<span class="built_in">unset</span> https_proxy</span><br><span class="line">	<span class="built_in">unset</span> no_proxy</span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&quot;Proxy Off&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>()&#123;</span><br><span class="line">	<span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">	<span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line">	<span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&quot;Proxy On&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>如何使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PS：单独开一个终端运行 clash 也可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">clash &amp;</span><br><span class="line"><span class="built_in">nohup</span> clash &amp;	<span class="comment"># 关闭终端不终止，默认输出到 nohup.out，重定向增加 `&gt; /dev/null 2&gt;&amp;1`</span></span><br><span class="line"><span class="built_in">nohup</span> clash &gt; /dev/null 2&gt;&amp;1 &amp;	<span class="comment"># 建议打开，否则在命令行一直输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开代理</span></span><br><span class="line">proxy_on	<span class="comment"># 仅限于当前终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">wget www.google.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭代理</span></span><br><span class="line">proxy_off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 clash</span></span><br><span class="line"><span class="built_in">jobs</span>		<span class="comment"># 查看后台命令，-l 查看任务 PID</span></span><br><span class="line"><span class="built_in">fg</span> %jobid	<span class="comment"># 放回前台</span></span><br><span class="line">Ctrl-C		<span class="comment"># 终止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">jobs</span> -l		<span class="comment"># 查看任务 PID</span></span><br><span class="line"><span class="built_in">kill</span> -9 PID	<span class="comment"># 终止</span></span><br></pre></td></tr></table></figure>




</li>
<li><p>设置开机自启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将配置文件移动到 /etc 目录</span></span><br><span class="line">sudo <span class="built_in">mv</span> ~/.config/clash /etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到 /etc/systemd/system/clash.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Clash Daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/clash -d /etc/clash/</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> clash.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start clash.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status clash.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop clash</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora beta expired 问题</title>
    <url>/2022/07/17/Typora-beta-expired-%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Typora 最后一个免费版本是 <code>0.11.18</code></p>
<p>运行时会提示 <code>The beta version of typora is expired, please download and install a newer version</code></p>
<span id="more"></span>



<p>尝试断网运行没用</p>
<p>解决方案：</p>
<ol>
<li>打开注册表</li>
<li>找到 <code>计算机\HKEY_CURRENT_USER\SOFTWARE\Typora</code></li>
<li>右键单击 <code>Typora</code></li>
<li>修改权限，<strong>Administrators</strong> –&gt; <strong>完全控制拒绝</strong>、<strong>读取拒绝</strong></li>
</ol>
<p>PS：记得在偏好设置中关闭自动更新</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub 搭建博客</title>
    <url>/2022/07/15/Hexo-GitHub-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>欢迎来到我的博客 ~</p>
<span id="more"></span>
<ol>
<li class="lvl-3">
<p>搭建博客：<a href="https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></p>
</li>
<li class="lvl-3">
<p>博客美化：<a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502">Hexo博客优化之Next主题美化</a></p>
</li>
<li class="lvl-3">
<p>标签和分类页：<a href="https://blog.csdn.net/qq_34243930/article/details/104056549">用Github Pages+Hexo搭建博客之(六)如何显示标签和分类页面的内容</a></p>
</li>
<li class="lvl-3">
<p>图标网站：<a href="https://zhuanlan.zhihu.com/p/431105940">图标分享 | 30 个免费 icon 下载网站</a></p>
</li>
<li class="lvl-3">
<p>站内搜索：<a href="https://www.jianshu.com/p/d388119a90ec">Hexo增加搜索功能</a> <a href="http://theme-next.iissnan.com/third-party-services.html#local-search">Local Search</a></p>
</li>
<li class="lvl-3">
<p>typora(0.11.18)修改快捷键：<a href="https://support.typora.io/">https://support.typora.io/</a></p>
</li>
<li class="lvl-3">
<p>修改主题字体：<a href="https://blog.csdn.net/qq_33154343/article/details/106134472">修改typora主题字体</a> <a href="https://blog.csdn.net/sailist/article/details/104114578">Hexo-Next主题更改字体</a></p>
</li>
<li class="lvl-3">
<p>修改字体颜色：<a href="https://blog.csdn.net/m0_46161993/article/details/123216881">Typora更改斜体字、加粗字、高亮、强调字等颜色</a></p>
</li>
<li class="lvl-3">
<p>选择更高级的Markdown渲染器：<a href="https://blog.csdn.net/qq_42951560/article/details/123596899">【Hexo】选择更高级的Markdown渲染器</a></p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: Hello World <span class="comment"># 标题</span></span><br><span class="line"><span class="built_in">date</span>: 2019/3/26 hh:mm:ss <span class="comment"># 时间</span></span><br><span class="line">categories: <span class="comment"># 分类</span></span><br><span class="line">- Diary</span><br><span class="line">tags: <span class="comment"># 标签</span></span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br><span class="line"></span><br><span class="line">hexo new <span class="string">&quot;name&quot;</span>       <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;name&quot;</span>  <span class="comment"># 新建页面</span></span><br><span class="line">hexo g                <span class="comment"># 生成页面</span></span><br><span class="line">hexo d                <span class="comment"># 部署发布</span></span><br><span class="line">hexo g -d             <span class="comment"># 生成页面并部署</span></span><br><span class="line">hexo s                <span class="comment"># 本地预览</span></span><br><span class="line">hexo clean            <span class="comment"># 清除缓存和已生成的静态文件</span></span><br><span class="line">hexo <span class="built_in">help</span>             <span class="comment"># 帮助</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置置顶和隐藏，在博客的根目录执行</span></span><br><span class="line">npm uninstall hexo-generator-index --save	<span class="comment"># 不做好像也可</span></span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br><span class="line">---</span><br><span class="line">title: xxx</span><br><span class="line">top: <span class="literal">true</span></span><br><span class="line">visible: hiden</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊语法</span></span><br><span class="line">+++ **点击折叠**</span><br><span class="line">这是被隐藏的内容</span><br><span class="line">+++</span><br><span class="line"></span><br><span class="line">::: tips</span><br><span class="line">**提示**</span><br><span class="line">这是一个提示</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: warning</span><br><span class="line">**注意**</span><br><span class="line">这是一个警告</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: danger</span><br><span class="line">**警告**</span><br><span class="line">这是一个危险信号</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: success</span><br><span class="line">**成功**</span><br><span class="line">这是一个成功信号</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>
<div class="tips">
<p>设置 typora 字体和 next 字体</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 复制 &#123;current-theme&#125;.css 生成 &#123;current-theme&#125;.user.css (原内容不要) */</span></span><br><span class="line"><span class="comment">/* 设置如下：(只会用到前两个，不存在时才会使用第三个、第四个...) */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Consolas&quot;</span>,<span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, <span class="string">&#x27;Segoe UI Emoji&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 hexo themes/next_c/_config.yml</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># family: Lato</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Times</span> <span class="string">New</span> <span class="string">Roman,</span> <span class="string">KaiTi</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Consolas,</span> <span class="string">KaiTi</span></span><br></pre></td></tr></table></figure>
</div>
<div class="tips">
<p>设置 typora 字体样式，同时设置 hexo 生成样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. typora 设置字体样式 */</span></span><br><span class="line"><span class="comment">/* 复制 &#123;current-theme&#125;.css 生成 &#123;current-theme&#125;.user.css (原内容不要) */</span></span><br><span class="line"><span class="comment">/* 设置如下： */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">mark</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffb07c</span>;</span><br><span class="line">&#125; <span class="comment">/* Highlight 高亮 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b5302e</span>;</span><br><span class="line">&#125; <span class="comment">/* Blod 加粗 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5f34e7</span>;</span><br><span class="line">&#125; <span class="comment">/* Italian 斜体字 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#005dad</span>;</span><br><span class="line">&#125; <span class="comment">/* Link 链接 */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2. typora 高亮快捷键Ctrl+G */</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 偏好设置</span><br><span class="line"><span class="number">2.</span> 打开高级设置</span><br><span class="line"><span class="number">3.</span> </span><br><span class="line"><span class="attr">&quot;keyBinding&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Highlight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ctrl+G&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3. hexo 设置高级渲染</span></span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line"></span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将以下复制到 hexo _config.yml，可以放在 depoly 上面</span></span><br><span class="line"><span class="comment"># Markdown-it config</span></span><br><span class="line"><span class="comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class="line">markdown:</span><br><span class="line">  preset: <span class="string">&quot;default&quot;</span></span><br><span class="line">  render:</span><br><span class="line">    html: <span class="literal">true</span></span><br><span class="line">    xhtmlOut: <span class="literal">false</span></span><br><span class="line">    langPrefix: <span class="string">&quot;language-&quot;</span></span><br><span class="line">    breaks: <span class="literal">true</span></span><br><span class="line">    linkify: <span class="literal">true</span></span><br><span class="line">    typographer: <span class="literal">true</span></span><br><span class="line">    quotes: <span class="string">&quot;“”‘’&quot;</span></span><br><span class="line">  enable_rules:</span><br><span class="line">  disable_rules:</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-cjk-breaks</span><br><span class="line">    - markdown-it-deflist</span><br><span class="line">    - markdown-it-emoji</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-mark</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-checkbox</span><br><span class="line">    - markdown-it-imsize</span><br><span class="line">    - markdown-it-expandable</span><br><span class="line">    - name: markdown-it-container</span><br><span class="line">      options: success</span><br><span class="line">    - name: markdown-it-container</span><br><span class="line">      options: tips</span><br><span class="line">    - name: markdown-it-container</span><br><span class="line">      options: warning</span><br><span class="line">    - name: markdown-it-container</span><br><span class="line">      options: danger</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: <span class="string">&quot;&quot;</span></span><br><span class="line">    permalink: <span class="literal">false</span></span><br><span class="line">    permalinkClass: <span class="string">&quot;header-anchor&quot;</span></span><br><span class="line">    permalinkSide: <span class="string">&quot;left&quot;</span></span><br><span class="line">    permalinkSymbol: <span class="string">&quot;¶&quot;</span></span><br><span class="line">    <span class="keyword">case</span>: 0</span><br><span class="line">    separator: <span class="string">&quot;-&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将以下复制到 hexo themes\next\source\css\_colors.styl</span></span><br><span class="line">.tips &#123;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">    background-color rgba(52,152,219,.3);</span><br><span class="line">    border-left 4px solid rgb(52,152,219);</span><br><span class="line">    color: darken(rgb(52,152,219),20%);</span><br><span class="line">&#125;</span><br><span class="line">.success &#123;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">    background-color rgba(46,204,113,.3);</span><br><span class="line">    border-left 4px solid rgb(46,204,113);</span><br><span class="line">    color: darken(rgb(46,204,113),20%);</span><br><span class="line">&#125;</span><br><span class="line">.warning &#123;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">    background-color rgba(241,196,15,.3);</span><br><span class="line">    border-left 4px solid rgb(241,196,15);</span><br><span class="line">    color: darken(rgb(241,196,15),20%);</span><br><span class="line">&#125;</span><br><span class="line">.danger &#123;</span><br><span class="line">    padding-left: 10px;</span><br><span class="line">    background-color rgba(231,76,60,.3);</span><br><span class="line">    border-left 4px solid rgb(231,76,60);</span><br><span class="line">    color: darken(rgb(231,76,60),20%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 修改 hexo themes\next\source\css\_colors<span class="selector-class">.styl</span></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: crimson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* .post-title */</span></span><br><span class="line"><span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Github.io 教程</tag>
      </tags>
  </entry>
</search>
